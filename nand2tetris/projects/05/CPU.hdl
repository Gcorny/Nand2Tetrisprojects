// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // A-ins and C-ins
    // for C : i xx a c1c2c3c4c5c6 d1d2d3 j1j2j3
    // A : i and the rest is just an address or a value
    Not(in=instruction[15], out=isinsA);
    
    //a : 0 =A or A , 1: M or D
    //d1 : A or M
    //d2 : D
    //d3 : M
    
    Mux16(a=outMM, b=instruction, sel=isinsA, out=outins);

    Or(a=isinsA, b=instruction[5], out=inA);
    ARegister(in=outins, load=inA, out=Areg, out[0..14]=addressM);
    

    And(a=instruction[15], b=instruction[12], out=inMux);
    Mux16(a=Areg, b=inM, sel=inMux, out=inALU);
    
    And(a=instruction[15], b=instruction[4], out=inD);
    DRegister(in=outMM, load=inD, out=Dreg);


    ALU(x=Dreg, y=inALU, zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=outM, out=outMM ,zr=zr ,ng=ng);

    //WriteM
    And(a=instruction[15], b=instruction[3], out=writeM);


    //j1 = less
    //j2 = equal
    //j3 = greater
    //check if the result is greater

    Not(in=zr, out=nzr);
    Not(in=ng, out=nng);
    And(a=nzr, b=nng, out=nzrpo);


    And(a=instruction[15], b=instruction[0], out=j3);
    And(a=nzrpo, b=j3, out=jgt);

    And(a=instruction[15], b=instruction[1], out=j2);
    And(a=zr, b=j2, out=jeq);

    And(a=instruction[15], b=instruction[2], out=j1);
    And(a=ng, b=j1, out=jlt);

    Or(a=jgt, b=jeq, out=load1);
    Or(a=load1, b=jlt, out=load2);
    PC(in=Areg, load=load2, inc=true, reset=reset, out[0..14]=pc);

    


}
